<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC4648 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml">
<!ENTITY RFC7515 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7515.xml">
<!ENTITY RFC7516 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7516.xml">
<!ENTITY RFC7517 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7517.xml">
<!ENTITY RFC7518 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7518.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<!-- <?rfc compact="yes" ?> -->
<?rfc subcompact="no" ?>
<rfc category="info" docName="draft-pei-teep-opentrustprotoarch-00.txt" ipr="trust200902"
  submissionType="IETF">
  <front>
    <title abbrev="OTrP">The Open Trust Protocol (OTrp) Architecture</title>

    <author fullname="Mingliang Pei" initials="M." surname="Pei">
      <organization>Symantec</organization>
      <address>
        <postal>
          <street>350 Ellis St</street>
          <city>Mountain View</city>
          <region>CA</region>
          <code>94043</code>
          <country>USA</country>
        </postal>
        <email>mingliang_pei@symantec.com</email>
      </address>
    </author>

    <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
      <organization>ARM Ltd.</organization>
      <address>
        <postal>
          <street>110 Fulbourn Rd</street>
          <city>Cambridge</city>
          <region>CB1</region>
          <code>9NJ</code>
          <country>Great Britain</country>
        </postal>
        <email>Hannes.tschofenig@arm.com</email>
      </address>
    </author>

    <author fullname="Andrew Atyeo" initials="A." surname="Atyeo">
      <organization>Intercede</organization>
      <address>
        <postal>
          <street>St. Mary's Road, Lutterworth</street>
          <city>Leicestershire</city>
          <region>LE17</region>
          <code>4PS</code>
          <country>Great Britain</country>
        </postal>
        <email>andrew.atyeo@intercede.com</email>
      </address>
    </author>

    <author fullname="Dapeng" initials="N." surname="Liu">
      <organization>Alibaba Group</organization>
      <address>
        <postal>
          <street>Beijing</street>
          <city>Beijing</city>
          <country>China</country>
        </postal>
        <email>maxpassion@gmail.com</email>
      </address>
    </author>

    <date month="April" year="2018" />
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>Trusted Execution Environment</keyword>
    <abstract>
      <t>This document specifies the Trusted Execution Environment Provisioning
        (TEEP) Open Trust Protocol (OTrP) components, use cases and its
        architecture. OTrP is a protocol to install, update,
        and delete applications in a Trusted Execution Environment (TEE) and
        to manage their security configuration.</t>
    </abstract>
  </front>

  <middle>
   <section anchor="introduction" title="Introduction">
      <t>The Trusted Execution Environment (TEE) concept has been designed
        and used to increase security by separating a regular operating system,
        also referred as a Rich Execution Environment (REE), from
        security-sensitive applications. In an TEE ecosystem, a Trusted Application
        Manager (TAM) is commonly used to manage keys and the Trusted Applications (TA)
        that run in a device. Different device vendors may use different
        TEE implementations. Different application providers may use
        different TAM providers. There arises a need of an open interoperable
        protocol that establishes trust between different devices and TAM
        providers, and management capability for a trustworthy
        TAM to manage Security Domains and applications running in different
        TEEs of various devices.</t>

      <t>We introduce the use cases and architecture of an Open Trust Protocol
        (OTrP) in this document that establishes mutual trust between a TAM and
        a TEE.</t>

      <t>The protocol addresses the following main trust problems.
        <list style="numbers">
          <t>An Application Developer of a Trusted Application (TA) needs
            to determine security-relevant information of a device before
            provisioning the TA to the device with a TEE. Examples include
            the verification of the device 'root of trust' and the type of
            TEE included in a device.
          </t>
          <t>A TEE in a device needs to determine whether an Application and
            its provider, namely, Trusted App Manager (TAM) is trustworthy
            or authorized to manage applications in the TEE.
          </t>
          <t>Secure Boot must be able to ensure a TEE is genuine.</t>
        </list>
      </t>

      <t>OTrP scalability (TBD)
      </t>

      <t>
        In the following sections, we introduce the scope of the protocol first
        in section <xref target="scope"/>. We introduce uses cases next
        in section <xref target="usecases"/>, and then trust model and architecture
        in section <xref target="model"/>.
      </t>
    </section>

    <section title="Requirements Language">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in
        <xref target="RFC2119">RFC 2119</xref>.
      </t>
    </section>

    <section anchor="terms" title="Terminology">
      <section anchor="Subsection-Definitions" title="Definitions">
        <t>The definitions provided below are defined as used in this
          document. The same terms may be defined differently in other
          documents.
        </t>

        <t>
          <list hangIndent="4" style="hanging">
          <t hangText="Client Application:">
              An application running on a rich OS, such as an Android,
Windows, or iOS  application, typically provided by an SP.
              <vspace blankLines="1" />
            </t>

            <t hangText="Device:">
              A physical piece of hardware that hosts a TEE along with
              a rich OS.
              <vspace blankLines="1" />
            </t>

            <t hangText="OTrP Agent:">
              An application running in the rich OS allowing communication
              with the TAM and the TEE.
              <vspace blankLines="1" />
            </t>

            <t hangText="Rich Application:">
              Alternative name of "Client Application". In this document
              we may use these two terms interchangably.
              <vspace blankLines="1" />
            </t>

            <t hangText="Rich Execution Environment (REE)">
              An environment that is provided and governed by a standard OS
              such as Android OS, potentially in conjunction with other
              supporting operating systems and hypervisors; it is outside
              of the TEE. This environment and applications running on it
              are considered un-trusted.
              <vspace blankLines="1" />
            </t>

            <t hangText="Secure Boot Module (SBM):">
              A firmware in a device that delivers secure boot functionality.
              It is generally signed and can be verified whether it can be
              trusted. We also call it a Trusted Firmware (TFW).
              <vspace blankLines="1" />
            </t>

            <t hangText="Service Provider (SP):">
              An entity that wishes to supply Trusted
              Applications to remote devices. A Service
              Provider requires the help of a TAM in order
              to provision the Trusted Applications to the devices.
              <vspace blankLines="1" />
            </t>

            <t hangText="Trust Anchor:">
              A root certificate that can be used to validate its children
              certificates. It is usually embedded in a device or configured
              by a TAM for validating the trust of a remote entity's
              certificate.
              <vspace blankLines="1" />
            </t>

            <t hangText="Trusted Application (TA):">
              An Application that runs in a TEE.
              <vspace blankLines="1" />
            </t>

            <t hangText="Trusted Execution Environment (TEE):">
              An execution environment that runs alongside of, but is isolated
              from, an REE. A TEE has security capabilities and meets
              certain security-related requirements. It protects TEE
              assets from general software attacks, defines rigid safeguards
              as to data and functions that a program can access, and
              resists a set of defined threats. It should have at least
              the following three properties: (a) A unique security
              identity that cannot be cloned; (b) Assuance that only authorized
              code can run in the TEE; (c) Memory that cannot be read by code
              outside of TEE. There are multiple technologies that can be used
              to implement a TEE, and the level of security achieved varies
              accordingly.
              <vspace blankLines="1" />
            </t>
          </list>
        </t>
      </section>

      <section title="Abbreviations">
        <t>
          <list hangIndent="8" style="hanging">
            <t hangText="CA">Certificate Authority</t>

            <t hangText="OTrP">Open Trust Protocol</t>

            <t hangText="REE">Rich Execution Environment</t>

            <t hangText="SD">Security Domain</t>

            <t hangText="SP">Service Provider</t>

            <t hangText="SBM">Secure Boot Module</t>

            <t hangText="TA">Trusted Application</t>

            <t hangText="TEE">Trusted Execution Environment</t>

            <t hangText="TFW">Trusted Firmware</t>

            <t hangText="TAM">Trusted Application Manager</t>
          </list>
        </t>
      </section>

    </section>

    <section anchor="scope" title="Scope and Assumptions">
      <t>This specification defines message payloads exchanged between devices
        and a TAM. The messages are designed in anticipation of the use of the
        most common transport methods such as HTTPS.
      </t>

      <t>This specification assumes that an applicable device is equipped with
      a TEE and is pre-provisioned with a device-unique public/private key pair,
      which is securely stored. This key pair is referred as the 'root of trust'.
      </t>

      <t>A Security Domain (SD) concept is used as the security boundary inside
        a TEE for trusted applications. It is defined as the TEE representation
        of an application provider, which is a logical space that contains a
        SP's TAs. One SD may contain multiple TAs, which generally belong to
        the same provider. Each Security Domain requires the management
        operations of TAs in the form of installation, update and deletion.
      </t>

      <t>A TA binary and personalization data can be from two sources:
        <list hangIndent="2" style="numbers">
          <t>A TAM supplies the signed and encrypted TA binary</t>
          <t>A Client Application supplies the TA binary</t>
        </list>

        The OTrP considers the first case where TA binary and
        personalization data are encrypted by recipient's public key that
        TAM has to be involved. The second case will be addressed
        separately.</t>
    </section>

    <section anchor="usecases" title="Use Cases">
      <section anchor="usecase-payment" title="Payment">
        <!-- TBD -->
        <t>TBD</t>
        <t>
        Payment application in a mobile device requires high security and trust
        about the hosting device. Payments initiated from a mobile device
        can use a Trusted Application running inside TEE in the device to
        provide strong identification and proof of transaction.
        </t>
      </section>
      <section anchor="usecase-auth" title="Authentication">
        <!-- TBD -->
        <t>TBD</t>
        <t>
        Device based user or device authentication may store its sensitive
        authentication keys inside TEE of the a device, providing hardware
        protected security key strength and trusted execution code.
        </t>
      </section>
      <section anchor="usecase-iot" title="Internet of Things">
        <!-- TBD -->
        <t>TBD</t>
        <t>
        Internet of Things (IoT) has been posing threats to networks and national
        infrastructures because of existing weak security in devices. It is
        very desirable security that IoT devices can be authenticated before
        they are taken into networks. A device with TEE can be the best to
        implement such IoT security functions.
        </t>
      </section>
    </section>

    <section anchor="model" title="OTrP System and Trust Model">
      <section anchor="components" title="System Components">
        <t>The following are the main components in this OTrP system.</t>

        <t>
          <list hangIndent="4" style="hanging">
            <t hangText="TAM:">The TAM is responsible for originating and
              coordinating lifecycle management activity on a particular TEE.
            </t>

            <t>A TAM manages device trust check on behalf of Service
              Providers. A TAM may be used by one SP or many SPs. A TAM
              also provides Security Domain management and TA management in a
              device, in particularly, over-the-air update to keep
              TAs up-to-date and clean up when a version should be removed.
            </t>

            <t hangText="Certificate Authority (CA):">Mutual trust between a device
              and a TAM as well as an SP is based on certificates. A
              device embeds a list of root certificates, called Trust Anchors,
              from trusted Certificate Authorities that a TAM will be
              validated against. A TAM will remotely attest a device by
              checking whether a device comes with a certificate from a
              trusted CA.
            </t>
            <t hangText="TEE:">The TEE in a device is responsible for protecting
              applications from attack, enabling the application to perform
              secure operations.
            </t>
            <t hangText="REE:">The REE is responsible for enabling off
              device communications to be established between the TEE
              and TAM. OTrP does not require the device OS to be secure.
            </t>
            <t hangText="OTrP Agent:">An application in the REE that
              can relay messages between a Client Application and TEE.
              Its implementation can be TEE specific as to how it can
              interact with a TEE in a device.
            </t>
            <t hangText="Secure Boot:">Secure boot (for the purposes of
              OTrP) must enable authenticity checking of TEEs by the TAM.
            </t>
          </list>
        </t>

        <t>The OTrP establishes appropriate trust anchors to enable
          TEEs and TAMs to communicate in a trusted way when performing
          lifecycle management transactions.</t>
      </section>

      <section anchor="relations" title="Entity Relations">
        <t>OTrP specifies messages and key properties that can
          establish mutual trust between a TEE and a TAM. The
          protocol provides specifications for the following three entities:
        </t>
        <t>
          <list style="numbers">
            <t>Key and certificate types required for device firmware, TEEs, TAs,
              SPs, and TAMs
            </t>
            <t>Data message formats that should be exchanged between a TEE in a
              device and a TAM
            </t>
            <t>An OTrP Agent application in the REE that can relay
              messages between a Client Application and TEE
            </t>
          </list>
        </t>

        <t>Figure 1: Protocol Scope and Entity Relationship</t>

        <t>
         <figure>
         <preamble></preamble>
         <artwork align="left"><![CDATA[
PKI    CA    -- CA                                 CA --
        |    |                                         |
        |    |                                         |
        |    |                                         |
Device  |    |   --- OTrP Agent / Client App ---       |
SW      |    |   |                             |       |
        |    |   |                             |       |
        |    |   |                             |       |
OTrP    |    -- TEE                           TAM-------
        |
        |
       FW
            ]]></artwork>
         </figure>
        </t>

        <t>Figure 2: OTrP System Diagram</t>

        <t>
         <figure>
         <preamble></preamble>
         <artwork align="left"><![CDATA[

        -------OTrP Message Protocol---
        |                             |
        |                             |
 --------------------           ---------------   ----------
 |  REE   |  TEE    |           |    TAM      |   |  SP    |
 |  ---   |  ---    |           |    ---      |   |  --    |
 |        |         |           |             |   |        |
 | Client | SD (TAs)|           |   SD / TA   |   |  TA    |
 |  Apps  |         |           |     Mgmt    |   |        |
 |   |    |         |           |             |   |        |
 |   |    |         |           |             |   |        |
 | OTrP   | Trusted |           |  Trusted    |   |        |
 | Agent  |  TAM/SP |           |   FW/TEE    |   |        |
 |        |   CAs   |           |    CAs      |   |        |
 |        |         |           |             |   |        |
 |        |TEE Key/ |           |  TAM Key/   |   |SP Key/ |
 |        |  Cert   |           |    Cert     |   | Cert   |
 |        | FW Key/ |           |             |   |        |
 |        |  Cert   |           |             |   |        |
 --------------------           ---------------   ----------
              |                        |              |
              |                        |              |
        -------------              ----------      ---------
        | TEE CA    |              | TAM CA |      | SP CA |
        -------------              ----------      ---------
          ]]></artwork>
         </figure>
        </t>

        <t>In the previous diagram, different Certificate Authorities can be used
          respectively for different types of certificates. OTrP Messages are
          always signed, where the signer keys is the message creator's private
          key such as a FW's private key, a TEE's private key, or a TAM's
          private key.
        </t>

        <t>The main OTrP component consists of a set of standard messages
          created by a TAM to deliver device SD and TA management commands to a
          device, and device attestation and response messages created by a TEE
          that responds to a TAM's OTrP message.
        </t>

        <t>The communication method of OTrP Messages between a TAM and TEE in a
        device may vary between TAM and TEE providers. A mandatory
        transport protocol is specified for a compliant TAM and a device TEE.</t>

        <t>It should be noted that network communication capability is generally
        not available in today's TEE powered devices. The networking functionality
        is handled by a rich Client Application with a remote internet services;
        the Client Applications uses a local TEE interface such as inter-process
        or a secure shared memory approach to interact with TA inside a TEE
        for message exchanges. Consequently, a TAM generally communicates with
        a Client Application about how it gets OTrP Messages that originates from
        TEE inside a device. Similarly, a TA or TEE generally gets OTrP messages
        from a TAM via some Client Application, not direct to the internet.
        </t>

        <t>It is imperative to have an interoperable interface to communicate
        with different TEEs in different devices that a Client Application
        needs to run and access a TA inside a TEE. This is the role of an OTrP
        Agent, which is a software component to bridge communication between a TAM
        and a TEE. The OTrP Agent doesn't need to know the actual content of OTrP
        Messages except for the TEE routing information.
        </t>
      </section>

      <section anchor="teeanchors" title="Trusted Anchors in TEE">
        <t>The TEE in each device comes with a trust store that contains a
          whitelist of the TAM's root CA certificates, which are called Trust
          Anchors. A TAM will be trusted to manage Security Domains and TAs
          in a device only if the TAM's certificate is chained to one of the root
          CA certificates in this trust store.
        </t>

        <t>Such a list is typically embedded in the TEE of a device, and the
          list update should be generally enabled.
        </t>

        <t>Before a TAM can begin operation in the marketplace to support
          devices of a given TEE, it must obtain a TAM certificate
          from a CA that is registered in the trust store of the TEE.</t>
      </section>

      <section anchor="TAManchors" title="Trusted Anchors in TAM">
        <t>The Trust Anchor set in a TAM consists of a list of Certificate
          Authority certificates that signs various device TEE certificates.
          A
          TAM decides what TEE and TFW it will trust.
        </t>
      </section>

      <section anchor="keytypes" title="Keys and Certificate Types">
        <t>OTrP leverages the following list of trust anchors and
          identities in generating signed and encrypted command messages that
          are exchanged between a device's TEE and a TAM. With these
          security artifacts, OTrP Messages are able to deliver end-to-end
          security without relying on any transport security.
        </t>

<!--        <t>TBD - remove table to use hang list after further edit review.</t> -->

        <texttable anchor="keytypelist" title="Key and Certificate Types">
          <ttcol align='left'>Key Entity Name</ttcol>
          <ttcol align='left'>Location</ttcol>
          <ttcol align='left'>Issuer</ttcol>
          <ttcol align='left'>Trust Implication</ttcol>
          <ttcol align='left'>Cardinality</ttcol>

          <c>1. TFW key pair and certificate</c>
          <c>Device secure storage</c>
          <c>FW CA</c>
          <c>A white list of FW root CA trusted by TAMs</c>
          <c>1 per device</c>

          <c>2. TEE key pair and certificate</c>
          <c>Device TEE</c>
          <c>TEE CA under a root CA</c>
          <c>A white list of TEE root CA trusted by TAMs</c>
          <c>1 per device</c>

          <c>3. TAM key pair and certificate</c>
          <c>TAM provider</c>
          <c>TAM CA under a root CA</c>
          <c>A white list of TAM root CA embedded in TEE</c>
          <c>1 or multiple can be used by a TAM</c>

          <c>4. SP key pair and certificate</c>
          <c>SP</c>
          <c>SP signer CA</c>
          <c>TAM manages SP. TA trust is delegated to TAM. TEE trusts TAM to
            ensure that a TA is trustworthy.
          </c>
          <c>1 or multiple can be used by a TAM</c>

        </texttable>

<!--        <t>******* TBD choose table or list view later *******</t> -->

        <t>
          <list hangIndent="4" style="hanging">
            <t hangText="1. TFW key pair and certificate:">A key pair and
              certificate for evidence of secure boot and trustworthy
              firmware in a device.
              <list hangIndent="2" style="hanging">
                <t hangText="Location: ">Device secure storage</t>
                <t hangText="Supported Key Type: ">RSA and ECC</t>
                <t hangText="Issuer: ">OEM CA</t>
                <t hangText="Trust Implication: ">A white list of FW root CA trusted
                  by TAMs
                </t>
                <t hangText="Cardinality: ">One per device</t>
              </list>
            </t>

            <t hangText="2. TEE key pair and certificate:">It is used for device
              attestation to a remote TAM and SP.
            </t>

            <t>This key pair is burned into the device at device manufacturer.
              The key pair and its certificate are valid for the expected
              lifetime of the device.
              <list hangIndent="2" style="hanging">
                <t hangText="Location: ">Device TEE</t>
                <t hangText="Supported Key Type: ">RSA and ECC</t>
                <t hangText="Issuer: ">A CA that chains to a TEE root CA</t>
                <t hangText="Trust Implication: ">A white list of TEE root CA
                  trusted by TAMs
                </t>
                <t hangText="Cardinality: ">One per device</t>
              </list>
            </t>

            <t hangText="3. TAM key pair and certificate:">A TAM provider acquires
              a certificate from a CA that a TEE trusts.
              <list hangIndent="2" style="hanging">
                <t hangText="Location: ">TAM provider</t>
                <t hangText="Supported Key Type: ">RSA and ECC.</t>
                <t hangText="Supported Key Size: ">RSA 2048-bit, ECC P-256
                  and P-384. Other sizes should be anticipated in future.
                </t>
                <t hangText="Issuer: ">TAM CA that chains to a root CA</t>
                <t hangText="Trust Implication: ">A white list of TAM root CA
                  embedded in TEE
                </t>
                <t hangText="Cardinality: ">One or multiple can be used by a TAM</t>
              </list>
            </t>

            <t hangText="4. SP key pair and certificate:">an SP uses its own key pair
              and certificate to sign a TA.
              <list hangIndent="2" style="hanging">
                <t hangText="Location: ">SP</t>
                <t hangText="Supported Key Type: ">RSA and ECC</t>
                <t hangText="Supported Key Size: ">RSA 2048-bit, ECC P-256
                  and P-384. Other sizes should be anticipated in future.
                </t>
                <t hangText="Issuer: ">an SP signer CA that chains to a root CA</t>
                <t hangText="Trust Implication: ">TAM manages SP. TA trusts an SP
                  by validating trust against a TAM that the SP uses. A TEE
                  trusts TAM to ensure that a TA from the TAM is trustworthy.
                </t>
                <t hangText="Cardinality: ">One or multiple can be used by an SP</t>
              </list>
            </t>
          </list>
        </t>
      </section>

      <section anchor="messages" title="Message Security">
        <t>The main OTrP component is the set of standard OTrP messages
          created by a TAM to deliver device SD and TA management commands to a
          device, and device attestation and response messages created by TEE to
          respond to TAM OTrP Messages.
        </t>
        <t>
          An OTrP Message is designed to provide end-to-end security. It is always
          signed by its creator. In addition, an OTrP Message is typically
          encrypted such that only the targeted device TEE or TAM is able
          to decrypt and view the actual content.
        </t>
      </section>

      <section anchor="sdtree" title="Security Domain Hierarchy and Ownership">
        <t>
          The primary job of a TAM is to help an SP to manage its trusted
          applications. A TA is typically installed in an SD. An SD is commonly
          created for an SP.
        </t>
        <t>
          When an SP delegates its SD and TA management to a TAM, an SD is
          created on behalf of a TAM in a TEE and the owner of the SD is
          assigned to the TAM. An SD may be associated with an SP but the TAM
          has full privilege to manage the SD for the SP.
        </t>
        <t>
          Each SD for an SP is associated with only one TAM. When an SP changes
          TAM, a new SP SD must be created to associate with the new TAM. The
          TEE will maintain a registry of TAM ID and SP SD ID mapping.
        </t>
        <t>
          From an SD ownership perspective, the SD tree is flat and there is
          only one level. An SD is associated with its owner. It is up to TEE
          implementation how it maintains SD binding information for a TAM and
          different SPs under the same TAM.
        </t>
        <t>
          It is an important decision in this protocol specification that a TEE
          doesn't need to know whether a TAM is authorized to manage the SD for
          an SP. This authorization is implicitly triggered by an SP Client
          Application, which instructs what TAM it wants to use. An SD is always
          associated with a TAM in addition to its SP ID. A rogue TAM isn't
          able to do anything on an unauthorized SP's SD managed by another TAM.
        </t>
        <t>
          Since a TAM may support multiple SPs, sharing the same SD name for
          different SPs creates a dependency in deleting an SD. An SD can be
          deleted only after all TAs associated with this SD is deleted. An SP
          cannot delete a Security Domain on its own with a TAM if a TAM
          decides to introduce such sharing. There are cases where multiple
          virtual SPs belong to the same organization, and a TAM chooses to use
          the same SD name for those SPs. This is totally up to the TAM
          implementation and out of scope of this specification.
        </t>
      </section>

      <section anchor="sdownerid"
        title="SD Owner Identification and TAM Certificate Requirements">
        <t>
          There is a need of cryptographically binding proof about the owner of
          an SD in a device. When an SD is created on behalf of a TAM, a future
          request from the TAM must present itself as a way that the TEE can
          verify it is the true owner. The certificate itself cannot reliably
          used as the owner because TAM may change its certificate.
        </t>
        <t>
          To this end, each TAM will be associated with a trusted identifier
          defined as an attribute in the TAM certificate. This field is kept
          the same when the TAM renew its certificates. A TAM CA is responsible
          to vet the requested TAM attribute value.
        </t>
        <t>
          This identifier value must not collide among different TAM providers,
          and one TAM shouldn't be able to claim the identifier used by another
          TAM provider.
        </t>
        <t>
          The certificate extension name to carry the identifier can initially
          use SubjectAltName:registeredID. A dedicated new extension name may
          be registered later.
        </t>
        <t>
          One common choice of the identifier value is the TAM's service URL. A
          CA can verify the domain ownership of the URL with the TAM in the
          certificate enrollment process.
        </t>
        <t>
          A TEE can assign this certificate attribute value as the TAM owner ID
          for the SDs that are created for the TAM.
        </t>
        <t>
          An alternative way to represent an SD ownership by a TAM is to have a
          unique secret key upon SD creation such that only the creator TAM is
          able to produce a Proof-of-Possession (POP) data with the secret.
        </t>
      </section>

      <section anchor="spcontainer" title="Service Provider Container">
        <!-- this paragraph is moved from word doc Implementation section into the
          current entity section along with SD identificaton discussion. -->
        <t>A sample Security Domain hierarchy for the TEE is shown below.
        </t>
        <t>
            <figure>
              <artwork><![CDATA[
    ----------
    |  TEE   |
    ----------
        |
        |          ----------
        |----------| SP1 SD1 |
        |          ----------
        |          ----------
        |----------| SP1 SD2 |
        |          ----------
        |          ----------
        |----------| SP2 SD1 |
                   ----------
             ]]></artwork>
            </figure>
        </t>
        <t>OTrP segregates SDs and TAs such that a TAM can only manage or
          retrieve data for SDs and TAs that it previously created for the
          SPs it represents.
        </t>
      </section>
      <!-- TBD a diagram flow -->
      <section anchor="setupflow" title="A Sample Device Setup Flow">
          <t>Step 1: Prepare Images for Devices
            <list hangIndent="2" style="numbers">
              <t>[TEE vendor] Deliver TEE Image (CODE Binary) to device OEM</t>
              <t>[CA]         Deliver root CA Whitelist</t>
              <t>[Soc]        Deliver TFW Image</t>
            </list>
          </t>
          <t></t>

          <t>Step 2: Inject Key Pairs and Images to Devices
            <list hangIndent="2" style="numbers">
              <t>[OEM] Generate Secure Boot Key Pair
                       (May be shared among multiple devices)</t>
              <t>[OEM] Flash signed TFW Image and signed TEE Image
                       onto devices (signed by Secure Boot Key)</t>
            </list>
          </t>
          <t></t>

          <t>Step 3: Setup attestation key pairs in devices
            <list hangIndent="2" style="numbers">
              <t>[OEM]     Flash Secure Boot Public Key and eFuse Key
                           (eFuse key is unique per device)</t>
              <t>[TFW/TEE] Generate a unique attestation key pair and
                           get a certificate for the device.</t>
            </list>
          </t>
          <t></t>

          <t>Step 4: Setup trust anchors in devices
            <list hangIndent="2" style="numbers">
              <t>[TFW/TEE] Store the key and certificate encrypted
                           with the eFuse key</t>
              <t>[TEE vendor or OEM] Store trusted CA certificate list
                           into devices</t>
            </list>
          </t>
      </section>
    </section>

    <section anchor="otrpagent" title="OTrP Agent">
      <t>A TEE and TAs that run inside the TEE don't generally have capability
        to communicate to the outside of the hosting device, for example,
        the TEE specified by Global Platform groups <xref target="GPTEE"/>.
        This calls for a software module in the REE world to handle the
        network communication. Each Client Application in REE may carry
        this communication functionality but it must also interact with
        the TEE for the message exchange. The TEE interaction will vary
        according to different TEEs. In order for a Client Application
        to transparently support different TEEs, it is imperative to have
        a common interface for a Client Application to invoke for exchanging
        messages with TEEs.
      </t>
      <t>A shared OTrP Agent comes to meed this need. An OTrP Agent is a
      Rich Application or SDK that facilitates communication between a TAM
      and TEE. It also provides interfaces for TAM SDK or Client Applications
      to query and trigger TA installation that the application needs to use.
      </t>
      <t>
        This interface for Client Applications may be commonly an Android
        service call for an Android powered device. A Client Application
        interacts with a TAM, and turns around to pass messages received
        from TAM to OTrP Agent.
      </t>
      <t>In all cases, a Client Application needs to be able to identify an
      OTrP Agent that it can use.
      </t>
      <section anchor="agentrole" title="Role of OTrP Agent">
        <t> An OTrP Agent abstracts the message exchanges
          with the TEE in a device. The input data is originated from a TAM
          that a Client Application connects. A Client Application may also
          directly call OTrP Agent for some TA query functions.
        </t>
        <t>
          OTrP Agent may internally process a request from TAM. At least, it
          needs to know where to route a message, e.g. TEE instance. It doesn't
          need to process or verify message content.
        </t>
        <t>
          OTrP Agent returns TEE / TFW generated response messages to the
          caller. OTrP Agent isn't expected to handle any network connection
          with an application or TAM.
        </t>
        <t>
          OTrP Agent only needs to return an OTrP Agent error message if the
          TEE is not reachable for some reason. Other errors are represented
          as response messages returned from the TEE which will then be
          passed to the TAM.
        </t>
      </section>

      <section anchor="agentimpl" title="OTrP Agent Implementation Consideration">
        <t>A Provider should consider methods of distribution, scope and
          concurrency on device and runtime options when implementing an OTrP
          Agent. Several non-exhaustive options are discussed below. Providers
          are encouraged to take advantage of the latest communication and
          platform capabilities to offer the best user experience.
        </t>
        <section title="OTrP Agent Distribution">
          <t>
            OTrP Agent installation is commonly carried out at OEM time. A
            user can
            dynamically download and install an OTrP Agent on-demand.
          </t>
          <t>
            It is important to ensure a legitimate OTrP Agent is installed and
            used. If an OTrP Agent is compromised it may send rogue messages to
            TAM and TEE and introduce additional risks.
          </t>
        </section>
        <section title="Number of OTrP Agent">
          <t>
            We anticipate only one shared OTrP Agent instance in a device. The
            device's TEE vendor will most probably supply one OTrP Agent.
            Potentially we expect some open source.
          </t>
          <t>
            With one shared OTrP Agent, the OTrP Agent provider is responsible
            to allow multiple TAMs and TEE providers to achieve
            interoperability. With a standard OTrP Agent interface, TAM can
            implement its own SDK for its SP Client Applications to work with
            this OTrP Agent.
          </t>
          <t>
            Multiple independent OTrP Agent providers can be used as long as
            they have standard interface to a Client Application or TAM SDK.
            Only one OTrP Agent is expected in a device.
          </t>
          <t>
            TAM providers are generally expected to provide SDK for SP
            applications to interact with an OTrP Agent for the TAM and TEE
            interaction.
          </t>
        </section>
      </section>
    </section>

    <section anchor="attestmain" title="Attestation">
      <section anchor="attest" title="Attestation Hierarchy">
        <t>The attestation hierarchy and seed required for TAM protocol
        operation must be built into the device at manufacture. Additional TEEs
        can be added post-manufacture using the scheme proposed, but it is
        outside of the current scope of this document to detail that.
        </t>
        <t>It should be noted that the attestation scheme described is based on
        signatures. The only encryption that takes place is with eFuse to
        release the SBM signing key and later during the protocol lifecycle
        management interchange with the TAM.
        </t>

        <section title="Attestation Hierarchy Establishment: Manufacture">
          <t>
            During manufacture the following steps are required:
          </t>
          <t>
            <list style="numbers">
              <t>A device-specific TFW key pair and certificate are burnt into
                the device, encrypted by eFuse. This key pair will be used for
                signing operations performed by the SBM.
              </t>
              <t>TEE images are loaded and include a TEE instance-specific
                key pair and certificate. The key pair and certificate are included
                in the image and covered by the code signing hash.
              </t>
              <t>The process for TEE images is repeated for any subordinate
                TEEs, which are additional TEEs after the root TEE that some
                devices have.
              </t>
            </list>
          </t>
        </section>

        <section title="Attestation Hierarchy Establishment: Device Boot">
          <t>During device boot the following steps are required:</t>
          <t>
            <list style="numbers">
              <t>Secure boot releases the TFW private key by decrypting it with
                eFuse
              </t>
              <t>The SBM verifies the code-signing signature of the active TEE
                 and places its TEE public key into a signing buffer, along with
                 its identifier for later access. For a non-OTrP TEE, the SBM
                 leaves the TEE public key field blank.
              </t>
              <t>The SBM signs the signing buffer with the TFW private key.</t>
              <t>Each active TEE performs the same operation as the SBM, building
                up their own signed buffer containing subordinate TEE
                information.
              </t>
            </list>
          </t>
        </section>

        <section title="Attestation Hierarchy Establishment: TAM">
          <t>Before a TAM can begin operation in the marketplace to support
            devices of a given TEE, it must obtain a TAM certificate from a
            CA that is registered in the trust store of devices with that TEE.
            In this way, the TEE can check the intermediate and root CA and
            verify that it trusts this TAM to perform operations on the TEE.
          </t>
        </section>
      </section>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>TBD
      </t>
    </section>

    <section anchor="security" title="Security Consideration">
      <section title="TA Trust Check at TEE">
        <t>
        A TA binary is signed by a TA signer certificate. This TA signing
        certificate/private key belongs to the SP, and may be self-signed (i.e.,
        it need not participate in a trust hierarchy). It is the responsibility
        of the TAM to only allow verified TAs from trusted SPs into the system.
        Delivery of that TA to the TEE is then the responsibility of the TEE,
        using the security mechanisms provided by the OTrP.
        </t>

        <t>
        We allow a way for an (untrusted) application to check the
        trustworthiness of a TA. OTrP Agent has a function to allow
        an application to query the information about a TA.
        </t>

        <t>
          An application in the Rich O/S may perform verification of the TA by
          verifying the signature of the TA. The GetTAInformation
          function is available to return the TEE supplied TA signer and TAM signer
          information to the application. An application can do additional
          trust checks on the certificate returned for this TA. It might trust
          the TAM, or require additional SP signer trust chaining.
        </t>
      </section>

      <section title="One TA Multiple SP Case">
        <t> A TA for multiple SPs must have a different identifier per SP.
          A TA will be installed in a different SD for each respective SP. </t>
      </section>

      <section title="OTrP Agent Trust Model">
        <t> An OTrP Agent could be malware in the vulnerable Rich OS. A
        Client Application will connect its TAM provider for required TA
        installation. It gets command messages from the TAM, and passes
        the message to the OTrP Agent. </t>

        <t> The OTrP is a conduit for enabling the TAM to communicate
        with the device's TEE to manage SDs and TAs. All TAM messages are
        signed and sensitive data is encrypted such that the OTrP Agent cannot
        modify or capture sensitive data. </t>
      </section>

      <section title="Data Protection at TAM and TEE">
        <t> The TEE implementation provides protection of data on the device.
        It is the responsibility of the TAM to protect data on its servers. </t>
      </section>

      <section title="Compromised CA">
        <t> A root CA for TAM certificates might get compromised. Some TEE
        trust anchor update mechanism is expected from device OEM. A compromised
        intermediate CA is covered by OCSP stapling and OCSP validation check
        in the protocol. A TEE should validate certificate revocation about a
        TAM certificate chain. </t>

        <t> If the root CA of some TEE device certificates is compromised,
        these devices might be rejected by a TAM, which is a decision of the
        TAM implementation and policy choice. Any intermediate CA for TEE device
        certificates SHOULD be validated by TAM with a Certificate
        Revocation List (CRL) or Online Certificate Status Protocol (OCSP)
        method.
        </t>
      </section>

      <section title="Compromised TAM">
        <t> The TEE SHOULD use validation of the supplied TAM certificates and
        OCSP stapled data to validate that the TAM is trustworthy. </t>

        <t> Since PKI is used, the integrity of the clock within the TEE
        determines the ability of the TEE to reject an expired TAM certificate,
        or revoked TAM certificate. Since OCSP stapling includes signature
        generation time, certificate validity dates are compared to the current
        time.</t>
      </section>

      <section title="Certificate Renewal">
        <t> TFW and TEE device certificates are expected to be long lived,
          longer than the
        lifetime of a device. A TAM certificate usually has a moderate
        lifetime of 2 to 5 years. A TAM should get renewed or rekeyed
        certificates. The root CA certificates for a TAM, which are embedded
        into the trust anchor store in
        a device, should have long lifetimes that don't require device trust
        anchor update. On the other hand, it is imperative that OEMs or device
        providers plan for support of trust anchor update in their shipped
        devices. </t>
      </section>

    </section> <!-- Security Consideration -->

  </middle>

  <back>
    <references title="Normative References">
     &RFC2119;
     &RFC4648;
     &RFC7515;
     &RFC7516;
     &RFC7517;
     &RFC7518;
    </references>

    <references title="Informative References">
      <reference anchor="GPTEE">
        <front>
          <title>Global Platform, GlobalPlatform Device Technology:
            TEE System
            Architecture, v1.0</title>

          <author>
            <organization>Global Platform</organization>
          </author>
          <date year="2013" />
        </front>
      </reference>
      <reference anchor="GPTEECLAPI">
        <front>
          <title>Global Platform, GlobalPlatform Device Technology:
            TEE Client API Specification, v1.0</title>
          <author>
            <organization>Global Platform</organization>
          </author>
          <date year="2013" />
        </front>
      </reference>
    </references>
  </back>
</rfc>
